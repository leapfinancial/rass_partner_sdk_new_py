# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator
from raassdkpyv2.models.language import Language

class PerformLevelOneParams(BaseModel):
    """
    PerformLevelOneParams
    """
    lang: Optional[Language] = None
    address_description: Optional[StrictStr] = Field(None, alias="addressDescription")
    country_code: Optional[StrictStr] = Field(None, alias="countryCode")
    call_location_longitude: Union[StrictFloat, StrictInt] = Field(..., alias="callLocationLongitude")
    call_location_latitude: Union[StrictFloat, StrictInt] = Field(..., alias="callLocationLatitude")
    city: StrictStr = Field(...)
    birth_state: Optional[StrictStr] = Field(None, alias="birthState")
    state: StrictStr = Field(...)
    zip_code: StrictStr = Field(..., alias="zipCode")
    gender: Optional[StrictStr] = None
    place_detail: Optional[StrictStr] = Field(None, alias="placeDetail")
    address2: Optional[StrictStr] = None
    address1: StrictStr = Field(...)
    date_of_birth: Optional[datetime] = Field(None, alias="dateOfBirth")
    email: Optional[StrictStr] = None
    second_last_name: Optional[StrictStr] = Field(None, alias="secondLastName")
    middle_name: Optional[StrictStr] = Field(None, alias="middleName")
    last_name: StrictStr = Field(..., alias="lastName")
    first_name: StrictStr = Field(..., alias="firstName")
    __properties = ["lang", "addressDescription", "countryCode", "callLocationLongitude", "callLocationLatitude", "city", "birthState", "state", "zipCode", "gender", "placeDetail", "address2", "address1", "dateOfBirth", "email", "secondLastName", "middleName", "lastName", "firstName"]

    @validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Male', 'Female'):
            raise ValueError("must be one of enum values ('Male', 'Female')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PerformLevelOneParams:
        """Create an instance of PerformLevelOneParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PerformLevelOneParams:
        """Create an instance of PerformLevelOneParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PerformLevelOneParams.parse_obj(obj)

        _obj = PerformLevelOneParams.parse_obj({
            "lang": obj.get("lang"),
            "address_description": obj.get("addressDescription"),
            "country_code": obj.get("countryCode"),
            "call_location_longitude": obj.get("callLocationLongitude"),
            "call_location_latitude": obj.get("callLocationLatitude"),
            "city": obj.get("city"),
            "birth_state": obj.get("birthState"),
            "state": obj.get("state"),
            "zip_code": obj.get("zipCode"),
            "gender": obj.get("gender"),
            "place_detail": obj.get("placeDetail"),
            "address2": obj.get("address2"),
            "address1": obj.get("address1"),
            "date_of_birth": obj.get("dateOfBirth"),
            "email": obj.get("email"),
            "second_last_name": obj.get("secondLastName"),
            "middle_name": obj.get("middleName"),
            "last_name": obj.get("lastName"),
            "first_name": obj.get("firstName")
        })
        return _obj


