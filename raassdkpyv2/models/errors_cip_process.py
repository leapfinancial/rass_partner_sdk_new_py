# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ErrorsCIPProcess(BaseModel):
    """
    ErrorsCIPProcess
    """
    error_id_scan_date_expired: Optional[StrictStr] = Field(None, alias="ERROR_ID_SCAN_DATE_EXPIRED")
    error_ofac_not_valid: Optional[StrictStr] = Field(None, alias="ERROR_OFAC_NOT_VALID")
    error_face_match_not_valid: Optional[StrictStr] = Field(None, alias="ERROR_FACE_MATCH_NOT_VALID")
    error_photo_scan_id_required: Optional[StrictStr] = Field(None, alias="ERROR_PHOTO_SCAN_ID_REQUIRED")
    error_ocr_profile_match_not_valid: Optional[StrictStr] = Field(None, alias="ERROR_OCR_PROFILE_MATCH_NOT_VALID")
    __properties = ["ERROR_ID_SCAN_DATE_EXPIRED", "ERROR_OFAC_NOT_VALID", "ERROR_FACE_MATCH_NOT_VALID", "ERROR_PHOTO_SCAN_ID_REQUIRED", "ERROR_OCR_PROFILE_MATCH_NOT_VALID"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ErrorsCIPProcess:
        """Create an instance of ErrorsCIPProcess from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ErrorsCIPProcess:
        """Create an instance of ErrorsCIPProcess from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ErrorsCIPProcess.parse_obj(obj)

        _obj = ErrorsCIPProcess.parse_obj({
            "error_id_scan_date_expired": obj.get("ERROR_ID_SCAN_DATE_EXPIRED"),
            "error_ofac_not_valid": obj.get("ERROR_OFAC_NOT_VALID"),
            "error_face_match_not_valid": obj.get("ERROR_FACE_MATCH_NOT_VALID"),
            "error_photo_scan_id_required": obj.get("ERROR_PHOTO_SCAN_ID_REQUIRED"),
            "error_ocr_profile_match_not_valid": obj.get("ERROR_OCR_PROFILE_MATCH_NOT_VALID")
        })
        return _obj


