# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class CIPData(BaseModel):
    """
    CIPData
    """
    address: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    county: Optional[StrictStr] = None
    district: Optional[StrictStr] = None
    dob: Optional[datetime] = None
    dob_raw: Optional[StrictStr] = Field(None, alias="dobRaw")
    doc_type: Optional[StrictStr] = Field(None, alias="docType")
    exp_date: Optional[datetime] = Field(None, alias="expDate")
    exp_date_raw: Optional[StrictStr] = Field(None, alias="expDateRaw")
    first_name: Optional[StrictStr] = Field(None, alias="firstName")
    gender: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    id_country: Optional[StrictStr] = Field(None, alias="idCountry")
    id_name: Optional[StrictStr] = Field(None, alias="idName")
    last_name: Optional[StrictStr] = Field(None, alias="lastName")
    names: Optional[StrictStr] = None
    nationality: Optional[StrictStr] = None
    second_lastname: Optional[StrictStr] = Field(None, alias="secondLastname")
    second_name: Optional[StrictStr] = Field(None, alias="secondName")
    state: Optional[StrictStr] = None
    subtype: Optional[StrictStr] = None
    __properties = ["address", "city", "country", "county", "district", "dob", "dobRaw", "docType", "expDate", "expDateRaw", "firstName", "gender", "id", "idCountry", "idName", "lastName", "names", "nationality", "secondLastname", "secondName", "state", "subtype"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CIPData:
        """Create an instance of CIPData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CIPData:
        """Create an instance of CIPData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CIPData.parse_obj(obj)

        _obj = CIPData.parse_obj({
            "address": obj.get("address"),
            "city": obj.get("city"),
            "country": obj.get("country"),
            "county": obj.get("county"),
            "district": obj.get("district"),
            "dob": obj.get("dob"),
            "dob_raw": obj.get("dobRaw"),
            "doc_type": obj.get("docType"),
            "exp_date": obj.get("expDate"),
            "exp_date_raw": obj.get("expDateRaw"),
            "first_name": obj.get("firstName"),
            "gender": obj.get("gender"),
            "id": obj.get("id"),
            "id_country": obj.get("idCountry"),
            "id_name": obj.get("idName"),
            "last_name": obj.get("lastName"),
            "names": obj.get("names"),
            "nationality": obj.get("nationality"),
            "second_lastname": obj.get("secondLastname"),
            "second_name": obj.get("secondName"),
            "state": obj.get("state"),
            "subtype": obj.get("subtype")
        })
        return _obj


