# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from raassdkpyv2.models.lp_operation_event_payment_method import LPOperationEventPaymentMethod
from raassdkpyv2.models.lp_operation_user_detail import LPOperationUserDetail
from raassdkpyv2.models.operation_user_detail import OperationUserDetail
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class LPOperationEvent(BaseModel):
    """
    LPOperationEvent
    """ # noqa: E501
    operation: LPOperationUserDetail
    pending_user_data: Optional[List[StrictStr]] = Field(default=None, alias="pendingUserData")
    pending_payment_method: Optional[LPOperationEventPaymentMethod] = Field(default=None, alias="pendingPaymentMethod")
    event_case: StrictStr = Field(alias="eventCase")
    user_to: OperationUserDetail = Field(alias="userTo")
    user_from: OperationUserDetail = Field(alias="userFrom")
    __properties: ClassVar[List[str]] = ["operation", "pendingUserData", "pendingPaymentMethod", "eventCase", "userTo", "userFrom"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of LPOperationEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of operation
        if self.operation:
            _dict['operation'] = self.operation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_to
        if self.user_to:
            _dict['userTo'] = self.user_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_from
        if self.user_from:
            _dict['userFrom'] = self.user_from.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of LPOperationEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "operation": LPOperationUserDetail.from_dict(obj.get("operation")) if obj.get("operation") is not None else None,
            "pendingUserData": obj.get("pendingUserData"),
            "pendingPaymentMethod": obj.get("pendingPaymentMethod"),
            "eventCase": obj.get("eventCase"),
            "userTo": OperationUserDetail.from_dict(obj.get("userTo")) if obj.get("userTo") is not None else None,
            "userFrom": OperationUserDetail.from_dict(obj.get("userFrom")) if obj.get("userFrom") is not None else None
        })
        return _obj


