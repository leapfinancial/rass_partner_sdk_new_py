# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator
from raassdkpyv2.models.attachment_responses import AttachmentResponses
from raassdkpyv2.models.base_identity import BaseIdentity

class ScanIdentityResponse(BaseModel):
    """
    After scan using an non sync engine, API will return this object A client has to pull the data from this object's pull_url  until the status is a ScanIdentityResponse or \"error\"  # noqa: E501
    """
    id: StrictStr = Field(...)
    type: StrictStr = Field(..., description="If it's async the client has to pull the data from this url")
    estimated_time: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="estimatedTime", description="Estimated time in seconds.")
    method: Optional[StrictStr] = Field(None, description="What scan engine was used")
    pull_url: Optional[StrictStr] = Field(None, description="Url to pull the data. If the type=sync you have perform interval pulls to this url in order to monitor the status")
    data: Optional[BaseIdentity] = None
    attachment_responses: Optional[AttachmentResponses] = Field(None, alias="attachmentResponses")
    __properties = ["id", "type", "estimatedTime", "method", "pull_url", "data", "attachmentResponses"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('sync', 'async'):
            raise ValueError("must be one of enum values ('sync', 'async')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ScanIdentityResponse:
        """Create an instance of ScanIdentityResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attachment_responses
        if self.attachment_responses:
            _dict['attachmentResponses'] = self.attachment_responses.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ScanIdentityResponse:
        """Create an instance of ScanIdentityResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ScanIdentityResponse.parse_obj(obj)

        _obj = ScanIdentityResponse.parse_obj({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "estimated_time": obj.get("estimatedTime"),
            "method": obj.get("method"),
            "pull_url": obj.get("pull_url"),
            "data": BaseIdentity.from_dict(obj.get("data")) if obj.get("data") is not None else None,
            "attachment_responses": AttachmentResponses.from_dict(obj.get("attachmentResponses")) if obj.get("attachmentResponses") is not None else None
        })
        return _obj


