# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt
from raassdkpyv2.models.errors_cip_process import ErrorsCIPProcess
from raassdkpyv2.models.level_status import LevelStatus
from raassdkpyv2.models.level_status_detail import LevelStatusDetail
from raassdkpyv2.models.pick_cip_exclude_keyof_cipid_or_attemps_or_is_valid_ofac_lola_cip import PickCIPExcludeKeyofCIPIdOrAttempsOrIsValidOFACLolaCIP

class PickCIPExcludeKeyofCIPIdOrAttempsOrIsValidOFAC(BaseModel):
    """
    From T, pick a set of properties whose keys are in the union K  # noqa: E501
    """
    cip_level: Union[StrictFloat, StrictInt] = Field(..., alias="cipLevel", description="this will updated  from event queue")
    has_personal_info: StrictBool = Field(..., alias="hasPersonalInfo")
    has_proof_of_l_ife: StrictBool = Field(..., alias="hasProofOfLIfe")
    has_scan_ids: StrictBool = Field(..., alias="hasScanIds")
    is_perform_level1: StrictBool = Field(..., alias="isPerformLevel1")
    is_perform_level2: StrictBool = Field(..., alias="isPerformLevel2")
    profile_and_ocr_similarity: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="profileAndOCRSimilarity")
    errors_process: ErrorsCIPProcess = Field(..., alias="errorsProcess")
    level1status: LevelStatus = Field(...)
    level1status_detail: LevelStatusDetail = Field(..., alias="level1statusDetail")
    level2status: LevelStatus = Field(...)
    level2status_detail: LevelStatusDetail = Field(..., alias="level2statusDetail")
    is_document_id_value_validated: Optional[StrictBool] = Field(None, alias="isDocumentIdValueValidated", description="This will be used when the document id value will be validated. For example The Nufi's CURP validation")
    is_alternate_flow: Optional[StrictBool] = Field(None, alias="isAlternateFlow", description="This is for knowing the specific cip has an alternate flow")
    lola_cip: Optional[PickCIPExcludeKeyofCIPIdOrAttempsOrIsValidOFACLolaCIP] = Field(None, alias="lolaCIP")
    __properties = ["cipLevel", "hasPersonalInfo", "hasProofOfLIfe", "hasScanIds", "isPerformLevel1", "isPerformLevel2", "profileAndOCRSimilarity", "errorsProcess", "level1status", "level1statusDetail", "level2status", "level2statusDetail", "isDocumentIdValueValidated", "isAlternateFlow", "lolaCIP"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PickCIPExcludeKeyofCIPIdOrAttempsOrIsValidOFAC:
        """Create an instance of PickCIPExcludeKeyofCIPIdOrAttempsOrIsValidOFAC from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of errors_process
        if self.errors_process:
            _dict['errorsProcess'] = self.errors_process.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lola_cip
        if self.lola_cip:
            _dict['lolaCIP'] = self.lola_cip.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PickCIPExcludeKeyofCIPIdOrAttempsOrIsValidOFAC:
        """Create an instance of PickCIPExcludeKeyofCIPIdOrAttempsOrIsValidOFAC from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PickCIPExcludeKeyofCIPIdOrAttempsOrIsValidOFAC.parse_obj(obj)

        _obj = PickCIPExcludeKeyofCIPIdOrAttempsOrIsValidOFAC.parse_obj({
            "cip_level": obj.get("cipLevel"),
            "has_personal_info": obj.get("hasPersonalInfo"),
            "has_proof_of_l_ife": obj.get("hasProofOfLIfe"),
            "has_scan_ids": obj.get("hasScanIds"),
            "is_perform_level1": obj.get("isPerformLevel1"),
            "is_perform_level2": obj.get("isPerformLevel2"),
            "profile_and_ocr_similarity": obj.get("profileAndOCRSimilarity"),
            "errors_process": ErrorsCIPProcess.from_dict(obj.get("errorsProcess")) if obj.get("errorsProcess") is not None else None,
            "level1status": obj.get("level1status"),
            "level1status_detail": obj.get("level1statusDetail"),
            "level2status": obj.get("level2status"),
            "level2status_detail": obj.get("level2statusDetail"),
            "is_document_id_value_validated": obj.get("isDocumentIdValueValidated"),
            "is_alternate_flow": obj.get("isAlternateFlow"),
            "lola_cip": PickCIPExcludeKeyofCIPIdOrAttempsOrIsValidOFACLolaCIP.from_dict(obj.get("lolaCIP")) if obj.get("lolaCIP") is not None else None
        })
        return _obj


