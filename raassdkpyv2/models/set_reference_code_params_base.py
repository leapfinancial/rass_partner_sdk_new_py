# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr

class SetReferenceCodeParamsBase(BaseModel):
    """
    SetReferenceCodeParamsBase
    """
    operation_id: StrictStr = Field(..., alias="operationId", description="plat Id of operation")
    sender_name: StrictStr = Field(..., alias="senderName", description="sender full name")
    receiver_name: StrictStr = Field(..., alias="receiverName", description="receiver full name")
    network_id: StrictStr = Field(..., alias="networkId", description="ID of cash operator. This can be obtained from Cash Operator")
    operation_type: StrictStr = Field(..., alias="operationType")
    cash_provider: StrictStr = Field(..., alias="cashProvider", description="can be (Numi, Greendot, Inpamex, NumiCashDelivery, Incomm) and it's obtained from Cash Network.")
    __properties = ["operationId", "senderName", "receiverName", "networkId", "operationType", "cashProvider"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SetReferenceCodeParamsBase:
        """Create an instance of SetReferenceCodeParamsBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SetReferenceCodeParamsBase:
        """Create an instance of SetReferenceCodeParamsBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SetReferenceCodeParamsBase.parse_obj(obj)

        _obj = SetReferenceCodeParamsBase.parse_obj({
            "operation_id": obj.get("operationId"),
            "sender_name": obj.get("senderName"),
            "receiver_name": obj.get("receiverName"),
            "network_id": obj.get("networkId"),
            "operation_type": obj.get("operationType"),
            "cash_provider": obj.get("cashProvider")
        })
        return _obj


