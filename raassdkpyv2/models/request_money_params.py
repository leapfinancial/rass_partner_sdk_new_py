# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from raassdkpyv2.models.raa_s_payment_method import RaaSPaymentMethod

class RequestMoneyParams(BaseModel):
    """
    RequestMoneyParams
    """
    correlation_id: StrictStr = Field(..., alias="correlationId")
    destination_payment_method: RaaSPaymentMethod = Field(..., alias="destinationPaymentMethod")
    reason: StrictStr = Field(...)
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    currency: Optional[StrictStr] = None
    sender_currency: Optional[StrictStr] = Field(None, alias="senderCurrency")
    sender_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="senderAmount")
    recipient_amount: Union[StrictFloat, StrictInt] = Field(..., alias="recipientAmount")
    recipient_currency: StrictStr = Field(..., alias="recipientCurrency")
    bonus_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="bonusAmount")
    tenant_id: Optional[StrictStr] = Field(None, alias="tenantId")
    user_tenant_id: Optional[StrictStr] = Field(None, alias="userTenantId")
    application: Optional[StrictStr] = None
    exchange_rate: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="exchangeRate")
    request_to: StrictStr = Field(..., alias="requestTo")
    __properties = ["correlationId", "destinationPaymentMethod", "reason", "amount", "currency", "senderCurrency", "senderAmount", "recipientAmount", "recipientCurrency", "bonusAmount", "tenantId", "userTenantId", "application", "exchangeRate", "requestTo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RequestMoneyParams:
        """Create an instance of RequestMoneyParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of destination_payment_method
        if self.destination_payment_method:
            _dict['destinationPaymentMethod'] = self.destination_payment_method.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RequestMoneyParams:
        """Create an instance of RequestMoneyParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RequestMoneyParams.parse_obj(obj)

        _obj = RequestMoneyParams.parse_obj({
            "correlation_id": obj.get("correlationId"),
            "destination_payment_method": RaaSPaymentMethod.from_dict(obj.get("destinationPaymentMethod")) if obj.get("destinationPaymentMethod") is not None else None,
            "reason": obj.get("reason"),
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "sender_currency": obj.get("senderCurrency"),
            "sender_amount": obj.get("senderAmount"),
            "recipient_amount": obj.get("recipientAmount"),
            "recipient_currency": obj.get("recipientCurrency"),
            "bonus_amount": obj.get("bonusAmount"),
            "tenant_id": obj.get("tenantId"),
            "user_tenant_id": obj.get("userTenantId"),
            "application": obj.get("application"),
            "exchange_rate": obj.get("exchangeRate"),
            "request_to": obj.get("requestTo")
        })
        return _obj


