# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class GetReferenceCodeResponse(BaseModel):
    """
    Code: string with Code Reference Id, will be used for Get Reference Information  ExpirationDate: date ultil Code expires (YYYY/MM/DD)  CodeType: Barcode or QR  # noqa: E501
    """
    code: Optional[StrictStr] = None
    expiration_date: StrictStr = Field(..., alias="expirationDate")
    code_type: Dict[str, Any] = Field(..., alias="codeType")
    status: StrictStr = Field(...)
    status_message: Optional[StrictStr] = Field(None, alias="statusMessage")
    __properties = ["code", "expirationDate", "codeType", "status", "statusMessage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetReferenceCodeResponse:
        """Create an instance of GetReferenceCodeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetReferenceCodeResponse:
        """Create an instance of GetReferenceCodeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetReferenceCodeResponse.parse_obj(obj)

        _obj = GetReferenceCodeResponse.parse_obj({
            "code": obj.get("code"),
            "expiration_date": obj.get("expirationDate"),
            "expirationDate": obj.get("expirationDate"),
            "code_type": obj.get("codeType"),
            "codeType": obj.get("codeType"),
            "status": obj.get("status"),
            "status_message": obj.get("statusMessage"),
            "statusMessage": obj.get("statusMessage")
        })
        return _obj


