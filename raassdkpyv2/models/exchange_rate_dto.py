# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class ExchangeRateDTO(BaseModel):
    """
    ExchangeRateDTO
    """
    id: StrictStr = Field(...)
    currency_code_dest: StrictStr = Field(..., alias="currencyCodeDest")
    currency_code_src: StrictStr = Field(..., alias="currencyCodeSrc")
    exchange_rate: Union[StrictFloat, StrictInt] = Field(..., alias="exchangeRate")
    exchange_rate_updated_at: StrictStr = Field(..., alias="exchangeRateUpdatedAt")
    __properties = ["id", "currencyCodeDest", "currencyCodeSrc", "exchangeRate", "exchangeRateUpdatedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExchangeRateDTO:
        """Create an instance of ExchangeRateDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExchangeRateDTO:
        """Create an instance of ExchangeRateDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExchangeRateDTO.model_validate(obj)

        _obj = ExchangeRateDTO.model_validate(obj)
        return _obj


