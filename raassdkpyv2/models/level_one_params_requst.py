# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class LevelOneParamsRequst(BaseModel):
    """
    LevelOneParamsRequst
    """
    zip_code: StrictStr = Field(..., alias="zipCode")
    place_detail: Optional[StrictStr] = Field(None, alias="placeDetail")
    city: StrictStr = Field(...)
    address4: Optional[StrictStr] = None
    address3: Optional[StrictStr] = None
    address2: Optional[StrictStr] = None
    address1: StrictStr = Field(...)
    call_location_longitude: Union[StrictFloat, StrictInt] = Field(..., alias="callLocationLongitude")
    call_location_latitude: Union[StrictFloat, StrictInt] = Field(..., alias="callLocationLatitude")
    country_code: StrictStr = Field(..., alias="countryCode")
    state: StrictStr = Field(...)
    date_of_birth: Optional[StrictStr] = Field(None, alias="dateOfBirth")
    gender: Optional[StrictStr] = None
    birth_state: Optional[StrictStr] = Field(None, alias="birthState")
    user_id: StrictStr = Field(..., alias="userId")
    __properties = ["zipCode", "placeDetail", "city", "address4", "address3", "address2", "address1", "callLocationLongitude", "callLocationLatitude", "countryCode", "state", "dateOfBirth", "gender", "birthState", "userId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LevelOneParamsRequst:
        """Create an instance of LevelOneParamsRequst from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LevelOneParamsRequst:
        """Create an instance of LevelOneParamsRequst from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LevelOneParamsRequst.parse_obj(obj)

        _obj = LevelOneParamsRequst.parse_obj({
            "zip_code": obj.get("zipCode"),
            "place_detail": obj.get("placeDetail"),
            "city": obj.get("city"),
            "address4": obj.get("address4"),
            "address3": obj.get("address3"),
            "address2": obj.get("address2"),
            "address1": obj.get("address1"),
            "call_location_longitude": obj.get("callLocationLongitude"),
            "call_location_latitude": obj.get("callLocationLatitude"),
            "country_code": obj.get("countryCode"),
            "state": obj.get("state"),
            "date_of_birth": obj.get("dateOfBirth"),
            "gender": obj.get("gender"),
            "birth_state": obj.get("birthState"),
            "user_id": obj.get("userId")
        })
        return _obj


