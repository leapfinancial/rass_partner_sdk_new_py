# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from raassdkpyv2.models.i_phone_info_carrier import IPhoneInfoCarrier
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class IPhoneInfo(BaseModel):
    """
    IPhoneInfo
    """ # noqa: E501
    is_valid: Optional[StrictBool] = Field(default=None, alias="isValid")
    caller_name: Optional[StrictStr] = Field(default=None, alias="callerName")
    country_code: Optional[StrictStr] = Field(default=None, alias="countryCode")
    phone_number: StrictStr = Field(alias="phoneNumber")
    carrier: Optional[IPhoneInfoCarrier] = None
    __properties: ClassVar[List[str]] = ["isValid", "callerName", "countryCode", "phoneNumber", "carrier"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of IPhoneInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of carrier
        if self.carrier:
            _dict['carrier'] = self.carrier.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of IPhoneInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isValid": obj.get("isValid"),
            "callerName": obj.get("callerName"),
            "countryCode": obj.get("countryCode"),
            "phoneNumber": obj.get("phoneNumber"),
            "carrier": IPhoneInfoCarrier.from_dict(obj.get("carrier")) if obj.get("carrier") is not None else None
        })
        return _obj


