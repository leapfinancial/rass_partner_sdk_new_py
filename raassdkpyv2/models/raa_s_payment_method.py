# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from raassdkpyv2.models.available_payment_methods import AvailablePaymentMethods
from raassdkpyv2.models.payment_method_status import PaymentMethodStatus
from raassdkpyv2.models.payment_token import PaymentToken
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RaaSPaymentMethod(BaseModel):
    """
    RaaSPaymentMethod
    """ # noqa: E501
    account_prefix: Optional[StrictStr] = Field(default=None, alias="accountPrefix")
    bin: Optional[StrictStr] = None
    payment_token: Optional[PaymentToken] = Field(default=None, alias="paymentToken")
    status: Optional[PaymentMethodStatus] = None
    application: Optional[StrictStr] = None
    account_id: Optional[StrictStr] = Field(default=None, alias="accountId")
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    phone_number: Optional[StrictStr] = Field(default=None, alias="phoneNumber")
    country: StrictStr
    zip_code: Optional[StrictStr] = Field(default=None, alias="zipCode")
    state: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    address2: Optional[StrictStr] = None
    address1: Optional[StrictStr] = None
    currency: Optional[StrictStr] = None
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId")
    card_network: Optional[StrictStr] = Field(default=None, alias="cardNetwork")
    cardtype: Optional[StrictStr] = None
    security_code: Optional[StrictStr] = Field(default=None, alias="securityCode")
    expiration_month: Optional[StrictStr] = Field(default=None, alias="expirationMonth")
    expiration_year: Optional[StrictStr] = Field(default=None, alias="expirationYear")
    expiration_date: Optional[StrictStr] = Field(default=None, alias="expirationDate")
    name_on_card: Optional[StrictStr] = Field(default=None, alias="nameOnCard")
    number: Optional[StrictStr] = None
    beneficiary_account_id: Optional[StrictStr] = Field(default=None, alias="beneficiaryAccountId")
    token_data: Optional[StrictStr] = Field(default=None, alias="tokenData")
    card_type: Optional[StrictStr] = Field(default=None, alias="cardType")
    account_number: Optional[StrictStr] = Field(default=None, alias="accountNumber")
    bank_entity_number: Optional[StrictStr] = Field(default=None, alias="bankEntityNumber")
    bank_name: Optional[StrictStr] = Field(default=None, alias="bankName")
    bank_account_type: Optional[StrictStr] = Field(default=None, alias="bankAccountType")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    is_primary: Optional[StrictBool] = Field(default=None, alias="isPrimary")
    type: AvailablePaymentMethods
    name: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["accountPrefix", "bin", "paymentToken", "status", "application", "accountId", "longitude", "latitude", "phoneNumber", "country", "zipCode", "state", "city", "address2", "address1", "currency", "externalId", "cardNetwork", "cardtype", "securityCode", "expirationMonth", "expirationYear", "expirationDate", "nameOnCard", "number", "beneficiaryAccountId", "tokenData", "cardType", "accountNumber", "bankEntityNumber", "bankName", "bankAccountType", "updatedAt", "createdAt", "isPrimary", "type", "name", "id"]

    @field_validator('cardtype')
    def cardtype_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DebitCard', 'CreditCard'):
            raise ValueError("must be one of enum values ('DebitCard', 'CreditCard')")
        return value

    @field_validator('card_type')
    def card_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DebitCard', 'CreditCard'):
            raise ValueError("must be one of enum values ('DebitCard', 'CreditCard')")
        return value

    @field_validator('bank_account_type')
    def bank_account_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CheckingAccount', 'SavingsAccount', 'OtherAccount'):
            raise ValueError("must be one of enum values ('CheckingAccount', 'SavingsAccount', 'OtherAccount')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RaaSPaymentMethod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payment_token
        if self.payment_token:
            _dict['paymentToken'] = self.payment_token.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RaaSPaymentMethod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountPrefix": obj.get("accountPrefix"),
            "bin": obj.get("bin"),
            "paymentToken": PaymentToken.from_dict(obj.get("paymentToken")) if obj.get("paymentToken") is not None else None,
            "status": obj.get("status"),
            "application": obj.get("application"),
            "accountId": obj.get("accountId"),
            "longitude": obj.get("longitude"),
            "latitude": obj.get("latitude"),
            "phoneNumber": obj.get("phoneNumber"),
            "country": obj.get("country"),
            "zipCode": obj.get("zipCode"),
            "state": obj.get("state"),
            "city": obj.get("city"),
            "address2": obj.get("address2"),
            "address1": obj.get("address1"),
            "currency": obj.get("currency"),
            "externalId": obj.get("externalId"),
            "cardNetwork": obj.get("cardNetwork"),
            "cardtype": obj.get("cardtype"),
            "securityCode": obj.get("securityCode"),
            "expirationMonth": obj.get("expirationMonth"),
            "expirationYear": obj.get("expirationYear"),
            "expirationDate": obj.get("expirationDate"),
            "nameOnCard": obj.get("nameOnCard"),
            "number": obj.get("number"),
            "beneficiaryAccountId": obj.get("beneficiaryAccountId"),
            "tokenData": obj.get("tokenData"),
            "cardType": obj.get("cardType"),
            "accountNumber": obj.get("accountNumber"),
            "bankEntityNumber": obj.get("bankEntityNumber"),
            "bankName": obj.get("bankName"),
            "bankAccountType": obj.get("bankAccountType"),
            "updatedAt": obj.get("updatedAt"),
            "createdAt": obj.get("createdAt"),
            "isPrimary": obj.get("isPrimary"),
            "type": obj.get("type"),
            "name": obj.get("name"),
            "id": obj.get("id")
        })
        return _obj


