# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from raassdkpyv2.models.add_card_session_params import AddCardSessionParams
from raassdkpyv2.models.country_alpha2_code import CountryAlpha2Code
from raassdkpyv2.models.language import Language
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SessionLinkParams(BaseModel):
    """
    SessionLinkParams
    """ # noqa: E501
    phone_number: StrictStr = Field(alias="phoneNumber")
    last_name: StrictStr = Field(alias="lastName")
    last_name2: Optional[StrictStr] = Field(default=None, alias="lastName2")
    gender: Optional[StrictStr] = None
    dob: Optional[datetime] = None
    email: Optional[StrictStr] = None
    first_name: StrictStr = Field(alias="firstName")
    middle_name: Optional[StrictStr] = Field(default=None, alias="middleName")
    address1: StrictStr
    address2: Optional[StrictStr] = None
    country_code: CountryAlpha2Code = Field(alias="countryCode")
    city: StrictStr
    zip_code: Optional[StrictStr] = Field(default=None, alias="zipCode")
    state: StrictStr
    birth_state: Optional[StrictStr] = Field(default=None, alias="birthState")
    lang: Optional[Language] = None
    add_card_params: Optional[AddCardSessionParams] = Field(default=None, alias="addCardParams")
    __properties: ClassVar[List[str]] = ["phoneNumber", "lastName", "lastName2", "gender", "dob", "email", "firstName", "middleName", "address1", "address2", "countryCode", "city", "zipCode", "state", "birthState", "lang", "addCardParams"]

    @field_validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Male', 'Female'):
            raise ValueError("must be one of enum values ('Male', 'Female')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SessionLinkParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of add_card_params
        if self.add_card_params:
            _dict['addCardParams'] = self.add_card_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SessionLinkParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "phoneNumber": obj.get("phoneNumber"),
            "lastName": obj.get("lastName"),
            "lastName2": obj.get("lastName2"),
            "gender": obj.get("gender"),
            "dob": obj.get("dob"),
            "email": obj.get("email"),
            "firstName": obj.get("firstName"),
            "middleName": obj.get("middleName"),
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "countryCode": obj.get("countryCode"),
            "city": obj.get("city"),
            "zipCode": obj.get("zipCode"),
            "state": obj.get("state"),
            "birthState": obj.get("birthState"),
            "lang": obj.get("lang"),
            "addCardParams": AddCardSessionParams.from_dict(obj.get("addCardParams")) if obj.get("addCardParams") is not None else None
        })
        return _obj


