# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr

class QuickAmount(BaseModel):
    """
    QuickAmount
    """
    amount: Union[StrictFloat, StrictInt] = Field(...)
    is_most_frequent: Optional[StrictBool] = Field(None, alias="isMostFrequent", description="This config is to display the most frequent quick amount in the UI")
    exchange: Union[StrictFloat, StrictInt] = Field(...)
    currency_code_src: StrictStr = Field(..., alias="currencyCodeSrc")
    currency_code_dest: StrictStr = Field(..., alias="currencyCodeDest")
    __properties = ["amount", "isMostFrequent", "exchange", "currencyCodeSrc", "currencyCodeDest"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QuickAmount:
        """Create an instance of QuickAmount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QuickAmount:
        """Create an instance of QuickAmount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QuickAmount.parse_obj(obj)

        _obj = QuickAmount.parse_obj({
            "amount": obj.get("amount"),
            "is_most_frequent": obj.get("isMostFrequent"),
            "exchange": obj.get("exchange"),
            "currency_code_src": obj.get("currencyCodeSrc"),
            "currency_code_dest": obj.get("currencyCodeDest")
        })
        return _obj


