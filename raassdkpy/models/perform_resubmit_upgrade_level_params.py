# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from raassdkpy.models.user_document import UserDocument

class PerformResubmitUpgradeLevelParams(BaseModel):
    """
    PerformResubmitUpgradeLevelParams
    """
    level: Union[StrictFloat, StrictInt] = Field(...)
    level_status_detail: StrictStr = Field(..., alias="levelStatusDetail")
    call_location_longitude: Union[StrictFloat, StrictInt] = Field(..., alias="callLocationLongitude")
    call_location_latitude: Union[StrictFloat, StrictInt] = Field(..., alias="callLocationLatitude")
    address1: Optional[StrictStr] = None
    address2: Optional[StrictStr] = None
    address3: Optional[StrictStr] = None
    address4: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    zip_code: Optional[StrictStr] = Field(None, alias="zipCode")
    place_detail: Optional[StrictStr] = Field(None, alias="placeDetail")
    email: Optional[StrictStr] = None
    country_code: Optional[StrictStr] = Field(None, alias="countryCode")
    date_of_birth: Optional[StrictStr] = Field(None, alias="dateOfBirth")
    nationality: Optional[StrictStr] = None
    birth_state: Optional[StrictStr] = Field(None, alias="birthState")
    gender: Optional[StrictStr] = None
    documents: Optional[conlist(UserDocument)] = None
    first_name: Optional[StrictStr] = Field(None, alias="firstName")
    last_name: Optional[StrictStr] = Field(None, alias="lastName")
    last_name2: Optional[StrictStr] = Field(None, alias="lastName2")
    is_id_address_different: Optional[StrictBool] = Field(None, alias="isIdAddressDifferent")
    __properties = ["level", "levelStatusDetail", "callLocationLongitude", "callLocationLatitude", "address1", "address2", "address3", "address4", "state", "city", "zipCode", "placeDetail", "email", "countryCode", "dateOfBirth", "nationality", "birthState", "gender", "documents", "firstName", "lastName", "lastName2", "isIdAddressDifferent"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PerformResubmitUpgradeLevelParams:
        """Create an instance of PerformResubmitUpgradeLevelParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item in self.documents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['documents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PerformResubmitUpgradeLevelParams:
        """Create an instance of PerformResubmitUpgradeLevelParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PerformResubmitUpgradeLevelParams.parse_obj(obj)

        _obj = PerformResubmitUpgradeLevelParams.parse_obj({
            "level": obj.get("level"),
            "level_status_detail": obj.get("levelStatusDetail"),
            "call_location_longitude": obj.get("callLocationLongitude"),
            "call_location_latitude": obj.get("callLocationLatitude"),
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "address3": obj.get("address3"),
            "address4": obj.get("address4"),
            "state": obj.get("state"),
            "city": obj.get("city"),
            "zip_code": obj.get("zipCode"),
            "place_detail": obj.get("placeDetail"),
            "email": obj.get("email"),
            "country_code": obj.get("countryCode"),
            "date_of_birth": obj.get("dateOfBirth"),
            "nationality": obj.get("nationality"),
            "birth_state": obj.get("birthState"),
            "gender": obj.get("gender"),
            "documents": [UserDocument.from_dict(_item) for _item in obj.get("documents")] if obj.get("documents") is not None else None,
            "first_name": obj.get("firstName"),
            "last_name": obj.get("lastName"),
            "last_name2": obj.get("lastName2"),
            "is_id_address_different": obj.get("isIdAddressDifferent")
        })
        return _obj


