# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr

class CashLocation(BaseModel):
    """
    id: Unique Identifier of CashLocation  enable: Identify if location is enabled  cashOperatorId: Id of operator associated  name: Name of Location  addressLine1: Address  addressLine2: Address  state: State code  city:  City Code  longitude: Expression to include longitude value  latitude: Expression to include latitude value  phone: Telephone number  image: URL of image to identify this Location  # noqa: E501
    """
    id: StrictStr = Field(...)
    enable: StrictStr = Field(...)
    cash_operator_id: StrictStr = Field(..., alias="cashOperatorId")
    name: StrictStr = Field(...)
    address_line1: StrictStr = Field(..., alias="addressLine1")
    address_line2: StrictStr = Field(..., alias="addressLine2")
    state: StrictStr = Field(...)
    city: StrictStr = Field(...)
    longitude: StrictStr = Field(...)
    latitude: StrictStr = Field(...)
    phone: StrictStr = Field(...)
    image: StrictStr = Field(...)
    __properties = ["id", "enable", "cashOperatorId", "name", "addressLine1", "addressLine2", "state", "city", "longitude", "latitude", "phone", "image"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CashLocation:
        """Create an instance of CashLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CashLocation:
        """Create an instance of CashLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CashLocation.parse_obj(obj)

        _obj = CashLocation.parse_obj({
            "id": obj.get("id"),
            "enable": obj.get("enable"),
            "cash_operator_id": obj.get("cashOperatorId"),
            "name": obj.get("name"),
            "address_line1": obj.get("addressLine1"),
            "address_line2": obj.get("addressLine2"),
            "state": obj.get("state"),
            "city": obj.get("city"),
            "longitude": obj.get("longitude"),
            "latitude": obj.get("latitude"),
            "phone": obj.get("phone"),
            "image": obj.get("image")
        })
        return _obj


