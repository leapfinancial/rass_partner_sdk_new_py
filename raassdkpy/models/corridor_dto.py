# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from raassdkpy.models.available_payment_methods import AvailablePaymentMethods

class CorridorDTO(BaseModel):
    """
    CorridorDTO
    """
    id: StrictStr = Field(..., alias="Id")
    source_payment_method_type: AvailablePaymentMethods = Field(..., alias="SourcePaymentMethodType")
    destination_payment_method_type: AvailablePaymentMethods = Field(..., alias="DestinationPaymentMethodType")
    lower_limit: Union[StrictFloat, StrictInt] = Field(..., alias="LowerLimit")
    upper_limit: Union[StrictFloat, StrictInt] = Field(..., alias="UpperLimit")
    fees: Optional[Any] = Field(..., alias="Fees")
    corridor_requirements: Optional[Any] = Field(..., alias="CorridorRequirements")
    is_active: StrictBool = Field(..., alias="IsActive")
    source_country: StrictStr = Field(..., alias="SourceCountry")
    destination_country: StrictStr = Field(..., alias="DestinationCountry")
    __properties = ["Id", "SourcePaymentMethodType", "DestinationPaymentMethodType", "LowerLimit", "UpperLimit", "Fees", "CorridorRequirements", "IsActive", "SourceCountry", "DestinationCountry"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CorridorDTO:
        """Create an instance of CorridorDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if fees (nullable) is None
        # and __fields_set__ contains the field
        if self.fees is None and "fees" in self.__fields_set__:
            _dict['Fees'] = None

        # set to None if corridor_requirements (nullable) is None
        # and __fields_set__ contains the field
        if self.corridor_requirements is None and "corridor_requirements" in self.__fields_set__:
            _dict['CorridorRequirements'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CorridorDTO:
        """Create an instance of CorridorDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CorridorDTO.parse_obj(obj)

        _obj = CorridorDTO.parse_obj({
            "id": obj.get("Id"),
            "source_payment_method_type": obj.get("SourcePaymentMethodType"),
            "destination_payment_method_type": obj.get("DestinationPaymentMethodType"),
            "lower_limit": obj.get("LowerLimit"),
            "upper_limit": obj.get("UpperLimit"),
            "fees": obj.get("Fees"),
            "corridor_requirements": obj.get("CorridorRequirements"),
            "is_active": obj.get("IsActive"),
            "source_country": obj.get("SourceCountry"),
            "destination_country": obj.get("DestinationCountry")
        })
        return _obj


