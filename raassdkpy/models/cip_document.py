# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from raassdkpy.models.cip_data import CIPData

class CIPDocument(BaseModel):
    """
    CIPDocument
    """
    type: Optional[StrictStr] = None
    sides: Optional[Union[StrictFloat, StrictInt]] = None
    has_mrz: Optional[StrictBool] = Field(None, alias="hasMRZ")
    data: Optional[CIPData] = None
    created_at: Optional[datetime] = Field(None, alias="createdAt")
    __properties = ["type", "sides", "hasMRZ", "data", "createdAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CIPDocument:
        """Create an instance of CIPDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CIPDocument:
        """Create an instance of CIPDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CIPDocument.parse_obj(obj)

        _obj = CIPDocument.parse_obj({
            "type": obj.get("type"),
            "sides": obj.get("sides"),
            "has_mrz": obj.get("hasMRZ"),
            "data": CIPData.from_dict(obj.get("data")) if obj.get("data") is not None else None,
            "created_at": obj.get("createdAt")
        })
        return _obj


