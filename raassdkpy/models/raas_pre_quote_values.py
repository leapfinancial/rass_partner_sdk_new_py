# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt
from raassdkpy.models.available_payment_methods import AvailablePaymentMethods

class RaasPreQuoteValues(BaseModel):
    """
    RaasPreQuoteValues
    """
    exchange_rate: Union[StrictFloat, StrictInt] = Field(..., alias="ExchangeRate")
    source_fee: Union[StrictFloat, StrictInt] = Field(..., alias="SourceFee")
    transaction_fee: Union[StrictFloat, StrictInt] = Field(..., alias="TransactionFee")
    destination_fee: Union[StrictFloat, StrictInt] = Field(..., alias="DestinationFee")
    tenant_fee: Union[StrictFloat, StrictInt] = Field(..., alias="TenantFee")
    type: AvailablePaymentMethods = Field(..., alias="Type")
    __properties = ["ExchangeRate", "SourceFee", "TransactionFee", "DestinationFee", "TenantFee", "Type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RaasPreQuoteValues:
        """Create an instance of RaasPreQuoteValues from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RaasPreQuoteValues:
        """Create an instance of RaasPreQuoteValues from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RaasPreQuoteValues.parse_obj(obj)

        _obj = RaasPreQuoteValues.parse_obj({
            "exchange_rate": obj.get("ExchangeRate"),
            "source_fee": obj.get("SourceFee"),
            "transaction_fee": obj.get("TransactionFee"),
            "destination_fee": obj.get("DestinationFee"),
            "tenant_fee": obj.get("TenantFee"),
            "type": obj.get("Type")
        })
        return _obj


